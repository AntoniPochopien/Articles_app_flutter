// Mocks generated by Mockito 5.4.4 from annotations
// in articles_app_flutter/test/startup/startup_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:articles_app_flutter/auth/domain/i_auth_repository.dart' as _i6;
import 'package:articles_app_flutter/common/models/failure.dart' as _i7;
import 'package:articles_app_flutter/domain/authenticated_user.dart' as _i8;
import 'package:articles_app_flutter/domain/user.dart' as _i3;
import 'package:articles_app_flutter/local_storage/domain/i_local_storage_repository.dart'
    as _i4;
import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUser_1 extends _i1.SmartFake implements _i3.User {
  _FakeUser_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ILocalStorageRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockILocalStorageRepository extends _i1.Mock
    implements _i4.ILocalStorageRepository {
  MockILocalStorageRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<void> init() => (super.noSuchMethod(
        Invocation.method(
          #init,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  void updateUser(_i3.User? user) => super.noSuchMethod(
        Invocation.method(
          #updateUser,
          [user],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [IAuthRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockIAuthRepository extends _i1.Mock implements _i6.IAuthRepository {
  MockIAuthRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.Either<_i7.Failure, _i3.User>> login({
    required String? username,
    required String? password,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #login,
          [],
          {
            #username: username,
            #password: password,
          },
        ),
        returnValue: _i5.Future<_i2.Either<_i7.Failure, _i3.User>>.value(
            _FakeEither_0<_i7.Failure, _i3.User>(
          this,
          Invocation.method(
            #login,
            [],
            {
              #username: username,
              #password: password,
            },
          ),
        )),
      ) as _i5.Future<_i2.Either<_i7.Failure, _i3.User>>);

  @override
  _i5.Future<_i2.Either<_i7.Failure, _i2.Unit>> register({
    required String? username,
    required String? password,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #register,
          [],
          {
            #username: username,
            #password: password,
          },
        ),
        returnValue: _i5.Future<_i2.Either<_i7.Failure, _i2.Unit>>.value(
            _FakeEither_0<_i7.Failure, _i2.Unit>(
          this,
          Invocation.method(
            #register,
            [],
            {
              #username: username,
              #password: password,
            },
          ),
        )),
      ) as _i5.Future<_i2.Either<_i7.Failure, _i2.Unit>>);

  @override
  _i5.Future<_i2.Either<_i7.Failure, _i2.Unit>> checkUsername(String? login) =>
      (super.noSuchMethod(
        Invocation.method(
          #checkUsername,
          [login],
        ),
        returnValue: _i5.Future<_i2.Either<_i7.Failure, _i2.Unit>>.value(
            _FakeEither_0<_i7.Failure, _i2.Unit>(
          this,
          Invocation.method(
            #checkUsername,
            [login],
          ),
        )),
      ) as _i5.Future<_i2.Either<_i7.Failure, _i2.Unit>>);
}

/// A class which mocks [AuthenticatedUser].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthenticatedUser extends _i1.Mock implements _i8.AuthenticatedUser {
  MockAuthenticatedUser() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.User get user => (super.noSuchMethod(
        Invocation.getter(#user),
        returnValue: _FakeUser_1(
          this,
          Invocation.getter(#user),
        ),
      ) as _i3.User);

  @override
  set user(_i3.User? _user) => super.noSuchMethod(
        Invocation.setter(
          #user,
          _user,
        ),
        returnValueForMissingStub: null,
      );

  @override
  void updateUser(_i3.User? newUser) => super.noSuchMethod(
        Invocation.method(
          #updateUser,
          [newUser],
        ),
        returnValueForMissingStub: null,
      );
}
